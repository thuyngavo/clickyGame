{"version":3,"sources":["components/NavBar.js","components/Banner.js","components/IconCard.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","Banner","status","currentScore","topScore","IconCard","id","value","onClick","clickedPlayer","src","image","alt","shuffleArray","array","counter","length","index","Math","floor","random","temp","App","state","result","clicked","Icons","gameOver","console","log","concat","_this","includes","resetGame","pointIncrease","push","setState","score","resetIconArray","points","newScramble","this","_this2","components_NavBar","components_Banner","map","icon","components_IconCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.733addda.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst NavBar = props => (\r\n  <header className=\"ph3 pv3 pv2-ns ph4-m ph5-l tc\">\r\n    <nav className=\"f6 fw6 ttu tracked\">\r\n      <h1 className=\"link dim white dib mr3\">Let's Play A Memory Game</h1>\r\n      <h2 className=\"fw2 f4 lh-copy mt0 mb3\">Click on an image to earn points, but don't click on any more than once!</h2>\r\n    </nav>\r\n  </header>\r\n)\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nconst Banner = props => (\r\n  <article className=\"mw7 center ph3 ph5-ns tc br2 pv3 bg-black-90 mb5 animated fadeIn\">\r\n    <p className=\"link dim white dib mr3\" >{props.status} | Score: {props.currentScore} | Top Score: {props.topScore}</p>\r\n  </article>\r\n);\r\nexport default Banner;","import React from 'react';\r\n\r\n\r\nconst IconCard = props => (\r\n  <section id={props.id} className=\"tc pa3 hvr-float-shadow animated zoomInUp\" value={props.id} onClick={() =>\r\n  props.clickedPlayer(props.id)\r\n  }>\r\n    <article className=\"w4 pa2 \">\r\n      <img src={props.image} className=\"db\" alt=\"game-char\" />\r\n    </article>\r\n  </section>\r\n)\r\n\r\nexport default IconCard;","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Banner from './components/Banner';\nimport IconCard from './components/IconCard';\nimport Icons from './icons.json';\nimport \"./components/iconCard.css\";\nimport \"./components/NavBar.css\"\nimport \"./components/Banner.css\"\n\nconst shuffleArray = (array) => {\n  //assigning variable ame to array\n  let counter = array.length;\n  //while loop to loop through array\n  while (counter > 0) {\n      // pick a random index\n      let index = Math.floor(Math.random() * counter);\n      // decrease counter by 1\n      counter--;\n      // change last element with it\n      let temp = array[counter];\n      array[counter] = array[index];\n      array[index] = temp;\n  }\n  return array;\n};\nclass App extends Component {\n\n  \n  state = {\n    currentScore: 0,\n    topScore: 0,\n    result: \"\",\n    clicked: [],\n    Icons,\n    gameOver: false\n  };\n\n  componentDidMount() {\n    this.setState({result: \"Click a character to get started\"})\n  }\n\n  // increase points and add id of element to array on click \n  clickedPlayer = (id) => {\n    console.log(`Picture clicked with id: ${id}`);\n    if(!this.state.clicked.includes(id)){\n      this.pointIncrease();\n      this.state.clicked.push(id);\n      this.setState({\n        gameOver: false\n      });\n    } else {\n      this.resetGame();\n    }\n  }\n\n  //increment the point by 1 when a new charapeter is picked and check if the user has won\n  pointIncrease = () => {\n    let score = this.state.currentScore + 1;\n    if (score === this.state.Icons.length) {\n      this.setState({\n        result: \"Winner!\",\n        topScore: score,\n        currentScore: 0,\n        clicked: [],\n        gameOver: false\n      });\n    } else if (score > this.state.topScore) {\n      this.setState({\n        topScore: score,\n        currentScore: score,\n        result: \"New high score!\",\n      });\n    } else {\n      this.setState({\n        currentScore: score,\n        result: \"You got this!\"\n      });\n    }\n    this.resetIconArray();\n  }\n\n  // reset the game when the user chooses a duplicate\n  resetGame = () => {\n    this.setState({\n      points: 0,\n      currentScore:0,\n      topScore: this.state.topScore,\n      result: \"Oh No! [GAME OVER] Try again next time.\",\n      clicked: [],\n      //Icons,\n      gameOver: true\n    });\n    this.resetIconArray();\n  }\n\n  // function to reset icons at random\n  resetIconArray = () => {\n    let newScramble = shuffleArray(Icons);\n    this.setState({Icons: newScramble})\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <NavBar />\n        <Banner topScore={this.state.topScore} currentScore={this.state.currentScore} status={this.state.result}/>\n        <div className='mainStyle'>\n        {this.state.Icons.map(icon => (\n          <IconCard\n            id={icon.id}\n            image={icon.image}\n            clickedPlayer={this.clickedPlayer}\n          />\n        ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}